import os
import logging
import asyncio
import traceback
from datetime import datetime, timedelta
from –±—ã–ª–æ import (
    parse_schedule,
    format_schedule,
    get_week_type,
    run_blocking
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_schedule_for_two_weeks(group_name, subgroup=None):
    """
    –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω—É—é –∏ –Ω–µ—á–µ—Ç–Ω—É—é) –±–µ–∑ —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω.
    
    Args:
        group_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        subgroup (int, optional): –ù–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏
    """
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}, –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        start_of_week = today - timedelta(days=today.weekday())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        current_week_type = await run_blocking(get_week_type, start_of_week.strftime('%d.%m.%Y'))
        logger.info(f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {'—á–µ—Ç–Ω–∞—è' if current_week_type else '–Ω–µ—á–µ—Ç–Ω–∞—è'}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–≤–µ –Ω–µ–¥–µ–ª–∏)
        dates_to_check = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–∫—Ä–æ–º–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)
        for i in range(6):  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –°—É–±–±–æ—Ç–∞
            date = start_of_week + timedelta(days=i)
            dates_to_check.append(date)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–∫—Ä–æ–º–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)
        for i in range(6):  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –°—É–±–±–æ—Ç–∞
            date = start_of_week + timedelta(days=i+7)
            dates_to_check.append(date)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        download_dir = "downloaded_files"
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.path.abspath(download_dir)}")
        
        if not os.path.exists(download_dir):
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{download_dir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{download_dir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        all_files = os.listdir(download_dir)
        logger.info(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {len(all_files)}")
        logger.info(f"–ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤: {all_files[:5] if len(all_files) >= 5 else all_files}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        xlsx_files = [f for f in all_files if f.endswith('.xlsx')]
        logger.info(f"–§–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx: {len(xlsx_files)}")
        if xlsx_files:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤ .xlsx: {xlsx_files[:5] if len(xlsx_files) >= 5 else xlsx_files}")
        
        no_dash_files = [f for f in all_files if '-' not in f]
        logger.info(f"–§–∞–π–ª–æ–≤ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞: {len(no_dash_files)}")
        if no_dash_files:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –¥–µ—Ñ–∏—Å–∞: {no_dash_files[:5] if len(no_dash_files) >= 5 else no_dash_files}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_files = [
            f for f in all_files
            if f.endswith('.xlsx') and '-' not in f  # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω
        ]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(schedule_files)} —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        if schedule_files:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_files[:5] if len(schedule_files) >= 5 else schedule_files}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞–ø—Ä—è–º—É—é
        target_file = f"{group_name}.xlsx"
        if target_file in all_files:
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª: {target_file}")
            group_file = os.path.join(download_dir, target_file)
        else:
            logger.info(f"–¢–æ—á–Ω—ã–π —Ñ–∞–π–ª {target_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é")
            
            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            group_file = None
            for file in all_files:
                if file.endswith('.xlsx') and group_name.upper() in file.upper():
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {file}")
                    group_file = os.path.join(download_dir, file)
                    break
        
        if not group_file:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
            return f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}"
        
        logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {group_file}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        all_schedules = []
        
        for date in dates_to_check:
            date_str = date.strftime('%d.%m.%Y')
            day_name = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][date.weekday()]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            week_type = await run_blocking(get_week_type, date_str)
            week_type_str = '—á–µ—Ç–Ω–∞—è' if week_type else '–Ω–µ—á–µ—Ç–Ω–∞—è'
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {day_name}, {date_str} ({week_type_str} –Ω–µ–¥–µ–ª—è)")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –±–µ–∑ —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω
                logger.info(f"–í—ã–∑–æ–≤ parse_schedule –¥–ª—è {date_str}...")
                schedule = await run_blocking(parse_schedule, group_file, date_str, subgroup)
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {date_str}: {schedule}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {date_str}...")
                formatted_schedule = await run_blocking(
                    format_schedule, 
                    schedule, 
                    group_name, 
                    date_str, 
                    subgroup
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ –∏ —Ç–∏–ø–µ –Ω–µ–¥–µ–ª–∏
                day_header = f"\nüìÖ {day_name}, {date_str} ({week_type_str} –Ω–µ–¥–µ–ª—è):\n"
                all_schedules.append(day_header + formatted_schedule)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {date_str}: {e}")
                logger.error(traceback.format_exc())
                all_schedules.append(f"\nüìÖ {day_name}, {date_str} ({week_type_str} –Ω–µ–¥–µ–ª—è):\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        full_schedule = "\n".join(all_schedules)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}"
        if subgroup:
            header += f", –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}"
        header += " –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –∑–∞–º–µ–Ω):\n"
        
        return header + full_schedule
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    # –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    group_name = "–ò–°–ø–í-24-1"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
    subgroup = 1  # –£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –∏–ª–∏ None –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã
    
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    try:
        result = await test_schedule_for_two_weeks(group_name, subgroup)
        print(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        print(traceback.format_exc())
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main()) 