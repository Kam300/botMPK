import os
import logging
import dropbox
from dropbox import DropboxOAuth2FlowNoRedirect
import schedule
import time
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import json
import threading
import traceback
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# API —Ç–æ–∫–µ–Ω—ã
APP_KEY = "x9ts10os3wo4pfi"
APP_SECRET = "pfy9sz6333yo4f5"
REFRESH_TOKEN_FILE = "refresh_token.txt"
ACCESS_TOKEN_FILE = "access_token.txt"

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
DOWNLOADS_DIR = "downloaded_files"
SUBSCRIBERS_FILE = "subscribers.json"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø
LAST_SCHEDULE_UPDATE_FILE = "last_schedule_update.txt"

# –§–∞–π–ª-–º–∞—Ä–∫–µ—Ä, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
FIRST_RUN_MARKER_FILE = "schedule_first_run_completed.txt"

# URLs –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø
GROUP_SCHEDULE_URLS = [
    "https://newlms.magtu.ru/mod/folder/view.php?id=1584679",
    "https://newlms.magtu.ru/mod/folder/view.php?id=1584691",
    "https://newlms.magtu.ru/mod/folder/view.php?id=1584686",
    "https://newlms.magtu.ru/mod/folder/view.php?id=1584687"
]

# URL –¥–ª—è –∑–∞–º–µ–Ω
REPLACEMENTS_URL = "https://newlms.magtu.ru/mod/folder/view.php?id=219250"

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø –≤ —á–∞—Å–∞—Ö
SCHEDULE_UPDATE_INTERVAL_HOURS = 96

# –§–∞–π–ª-—Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
UPDATE_IN_PROGRESS_FILE = "update_in_progress.flag"

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SYNC_TIMEOUT_SECONDS = 300  # 5 –º–∏–Ω—É—Ç

# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
UPDATE_IN_PROGRESS_MESSAGE = """‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* 

–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏ –∑–∞–º–µ–Ω. 
–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.

–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã."""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
update_timer = None
update_lock = threading.Lock()


class DropboxTokenManager:
    def __init__(self, app_key, app_secret):
        self.app_key = app_key
        self.app_secret = app_secret
        self.access_token = None
        self.refresh_token = None
        self.load_tokens()

    def load_tokens(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            if os.path.exists(ACCESS_TOKEN_FILE):
                with open(ACCESS_TOKEN_FILE, 'r') as f:
                    self.access_token = f.read().strip()
            if os.path.exists(REFRESH_TOKEN_FILE):
                with open(REFRESH_TOKEN_FILE, 'r') as f:
                    self.refresh_token = f.read().strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")

    def save_tokens(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã"""
        try:
            if self.access_token:
                with open(ACCESS_TOKEN_FILE, 'w') as f:
                    f.write(self.access_token)
            if self.refresh_token:
                with open(REFRESH_TOKEN_FILE, 'w') as f:
                    f.write(self.refresh_token)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")

    def refresh_access_token(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç access token –∏—Å–ø–æ–ª—å–∑—É—è refresh token"""
        try:
            if not self.refresh_token:
                raise Exception("Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω")

            url = "https://api.dropboxapi.com/oauth2/token"
            data = {
                "grant_type": "refresh_token",
                "refresh_token": self.refresh_token,
                "client_id": self.app_key,
                "client_secret": self.app_secret
            }

            response = requests.post(url, data=data)
            if response.status_code == 200:
                result = response.json()
                self.access_token = result.get("access_token")
                self.save_tokens()
                logger.info("Access token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    def get_valid_access_token(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π access token"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
            if self.access_token:
                dbx = dropbox.Dropbox(self.access_token)
                try:
                    dbx.users_get_current_account()
                    return self.access_token
                except dropbox.exceptions.AuthError:
                    logger.info("–¢–µ–∫—É—â–∏–π access token –∏—Å—Ç–µ–∫")

            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
            if self.refresh_access_token():
                return self.access_token

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            auth_flow = DropboxOAuth2FlowNoRedirect(
                self.app_key,
                self.app_secret,
                token_access_type='offline'
            )

            authorize_url = auth_flow.start()
            print(f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {authorize_url}")
            print("2. –ù–∞–∂–º–∏—Ç–µ 'Allow' (—Ä–∞–∑—Ä–µ—à–∏—Ç—å)")
            print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

            auth_code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
            oauth_result = auth_flow.finish(auth_code)

            self.access_token = oauth_result.access_token58
            self.refresh_token = oauth_result.refresh_token
            self.save_tokens()

            return self.access_token

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None


def get_dropbox_client():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Dropbox —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞"""
    try:
        token_manager = DropboxTokenManager(APP_KEY, APP_SECRET)
        access_token = token_manager.get_valid_access_token()

        if not access_token:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π access token")
            return None

        dbx = dropbox.Dropbox(
            access_token,
            app_key=APP_KEY,
            app_secret=APP_SECRET,
            oauth2_refresh_token=token_manager.refresh_token
        )

        logger.info("Dropbox –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return dbx

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Dropbox –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None


def notify_subscribers(new_files):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö –∑–∞–º–µ–Ω"""
    try:
        subscribers = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
                subscribers = json.load(f)
                
        if not subscribers:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω–∞—Ö
        message = "üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!*\n\n"
        for filename in new_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –∏–ª–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã
            if '-' in filename and filename.endswith('.xlsx'):
                dates = filename.replace('.xlsx', '').split('-')
                if len(dates) == 2:
                    try:
                        start_date = datetime.strptime(dates[0], '%d.%m.%y').strftime('%d.%m.%Y')
                        end_date = datetime.strptime(dates[1], '%d.%m.%y').strftime('%d.%m.%Y')
                        message += f"‚Ä¢ –ó–∞–º–µ–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
                    except ValueError:
                        try:
                            start_date = datetime.strptime(dates[0], '%d.%m.%Y').strftime('%d.%m.%Y')
                            end_date = datetime.strptime(dates[1], '%d.%m.%Y').strftime('%d.%m.%Y')
                            message += f"‚Ä¢ –ó–∞–º–µ–Ω—ã –Ω–∞ –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
                        except ValueError:
                            message += f"‚Ä¢ {filename}\n"
            elif filename.endswith('.xlsx'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —Å –æ–¥–Ω–æ–π –¥–∞—Ç–æ–π
                date_pattern = re.compile(r'^(\d{2}\.\d{2}\.\d{2,4})\.xlsx$')
                match = date_pattern.match(filename)
                if match:
                    date_str = match.group(1)
                    try:
                        formatted_date = datetime.strptime(date_str, '%d.%m.%y').strftime('%d.%m.%Y')
                        message += f"‚Ä¢ –ó–∞–º–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É: {formatted_date}\n"
                    except ValueError:
                        try:
                            formatted_date = datetime.strptime(date_str, '%d.%m.%Y').strftime('%d.%m.%Y')
                            message += f"‚Ä¢ –ó–∞–º–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É: {formatted_date}\n"
                        except ValueError:
                            message += f"‚Ä¢ {filename}\n"
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ –∑–∞–º–µ–Ω—ã
                    if not is_replacement_file(filename):
                        message += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {filename}\n"
                    else:
                        message += f"‚Ä¢ {filename}\n"
        
        message += "\n–ë—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã"
        
        # Save notification to both files to ensure delivery
        notification_data = {
            "message": message,
            "chat_ids": list(subscribers.keys()),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # Write to both notification files
        with open("new_replacements_notify.json", "w", encoding='utf-8') as f:
            json.dump(notification_data, f, ensure_ascii=False)
        
        with open("pending_notifications.json", "w", encoding='utf-8') as f:
            json.dump(notification_data, f, ensure_ascii=False)
            
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
        logger.error(traceback.format_exc())


def get_last_schedule_update():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø"""
    try:
        if os.path.exists(LAST_SCHEDULE_UPDATE_FILE):
            with open(LAST_SCHEDULE_UPDATE_FILE, 'r') as f:
                timestamp_str = f.read().strip()
                return datetime.fromisoformat(timestamp_str)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return None

def set_last_schedule_update():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø"""
    try:
        with open(LAST_SCHEDULE_UPDATE_FILE, 'w') as f:
            now = datetime.now()
            f.write(now.isoformat())
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {datetime.now()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def is_first_run():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤—ã–º"""
    return not os.path.exists(FIRST_RUN_MARKER_FILE)

def mark_first_run_completed():
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"""
    try:
        with open(FIRST_RUN_MARKER_FILE, 'w') as f:
            f.write(datetime.now().isoformat())
        logger.info("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")

def should_update_schedules(new_replacement_files):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø"""
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if new_replacement_files:
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã - –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø")
        return True
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
    first_run = is_first_run()
    if first_run:
        logger.info("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    last_update = get_last_schedule_update()
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–∞—Ä–∫–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –µ—Å—Ç—å - 
    # —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –ª—É—á—à–µ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if last_update is None:
        logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø")
        return True
    
    # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ 24 —á–∞—Å–∞)
    # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω
    if not first_run:
        logger.info("–ù–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω–∞—Ö")
        return False
    
    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
    hours_since_update = (datetime.now() - last_update).total_seconds() / 3600
    if hours_since_update >= SCHEDULE_UPDATE_INTERVAL_HOURS:
        logger.info(f"–ü—Ä–æ—à–ª–æ {hours_since_update:.1f} —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø")
        return True
    
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ü—Ä–æ—à–ª–æ {hours_since_update:.1f} —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {SCHEDULE_UPDATE_INTERVAL_HOURS} —á–∞—Å–æ–≤)")
    return False

def set_update_in_progress(in_progress=True):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    global update_timer
    
    try:
        with update_lock:
            if in_progress:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-—Ñ–ª–∞–≥
                with open(UPDATE_IN_PROGRESS_FILE, 'w') as f:
                    f.write(datetime.now().isoformat())
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞
                if update_timer is not None:
                    update_timer.cancel()
                    
                update_timer = threading.Timer(SYNC_TIMEOUT_SECONDS, lambda: set_update_in_progress(False))
                update_timer.daemon = True
                update_timer.start()
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ {SYNC_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            else:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª-—Ñ–ª–∞–≥, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(UPDATE_IN_PROGRESS_FILE):
                    os.remove(UPDATE_IN_PROGRESS_FILE)
                    logger.info("–°–Ω—è—Ç —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                
                # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if update_timer is not None:
                    update_timer.cancel()
                    update_timer = None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–ª–∞–≥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if os.path.exists(UPDATE_IN_PROGRESS_FILE):
                os.remove(UPDATE_IN_PROGRESS_FILE)
        except:
            pass

def is_update_in_progress():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞-—Ñ–ª–∞–≥–∞
        if os.path.exists(UPDATE_IN_PROGRESS_FILE):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–ª–∞–≥–∞
            # –∏ —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            with open(UPDATE_IN_PROGRESS_FILE, 'r') as f:
                timestamp_str = f.read().strip()
                start_time = datetime.fromisoformat(timestamp_str)
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–ª–æ
                if (datetime.now() - start_time).total_seconds() > SYNC_TIMEOUT_SECONDS:
                    set_update_in_progress(False)
                    logger.warning(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∑–∞–≤–∏—Å—à–µ–≥–æ —Ñ–ª–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ {SYNC_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥)")
                    return False
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try:
            if os.path.exists(UPDATE_IN_PROGRESS_FILE):
                os.remove(UPDATE_IN_PROGRESS_FILE)
        except:
            pass
        return False

def get_update_status_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if is_update_in_progress():
        return UPDATE_IN_PROGRESS_MESSAGE
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def sync_files_async(force_check=False):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
    —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if is_update_in_progress():
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å")
        return
        
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_sync():
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            set_update_in_progress(True)
            
            # –ü–æ–ª—É—á–∞–µ–º Dropbox –∫–ª–∏–µ–Ω—Ç
            dbx = get_dropbox_client()
            if not dbx:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Dropbox –∫–ª–∏–µ–Ω—Ç")
                set_update_in_progress(False)
                return

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            try:
                new_files = sync_files(dbx, force_check)
                if new_files:
                    logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {new_files}")
                else:
                    logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
                logger.error(traceback.format_exc())
            
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            set_update_in_progress(False)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            logger.error(traceback.format_exc())
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            set_update_in_progress(False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    sync_thread = threading.Thread(target=run_sync)
    sync_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º
    sync_thread.start()
    logger.info("–ó–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")

def sync_files(dbx=None, force_check=False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø —Å LMSMGTU"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø")

        # Create downloads directory if it doesn't exist
        if not os.path.exists(DOWNLOADS_DIR):
            os.makedirs(DOWNLOADS_DIR)

        # Get Dropbox client if not provided
        if dbx is None:
            dbx = get_dropbox_client()
            if not dbx:
                logger.error("Failed to get Dropbox client")
                return []

        new_files = []

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ–Ω
        new_replacement_files = sync_replacements(dbx, force_check)
        if new_replacement_files:
            new_files.extend(new_replacement_files)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø
        first_run = is_first_run()
        if force_check or should_update_schedules(new_replacement_files):
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø
            new_schedule_files = sync_group_schedules(dbx, force_check)
            if new_schedule_files:
                new_files.extend(new_schedule_files)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
            set_last_schedule_update()
            
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            if first_run:
                mark_first_run_completed()
        else:
            logger.info("–ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø - –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –∏–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω")

        # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if new_files:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
            try:
                from cache_utils import selective_cache_clear
                selective_cache_clear(reason="new_replacements")
                logger.info("–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
            notify_subscribers(new_files)
        else:
            logger.info("–ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        return new_files

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        logger.error(traceback.format_exc())
        return []

def sync_replacements(dbx, force_check=False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω —Å LMSMGTU"""
    try:
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ is_replacement_file)
        current_files = [f for f in os.listdir(DOWNLOADS_DIR) 
                       if f.endswith('.xlsx') and is_replacement_file(f)]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —Å–∞–π—Ç–∞
        response = requests.get(REPLACEMENTS_URL)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        links = soup.find_all('a')

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∑–∞–º–µ–Ω
        replacement_files = []
        for link in links:
            href = link.get('href')
            filename = link.text.strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∑–∞–º–µ–Ω
            if (href and ('.xlsx' in href or '.xls' in href)):
                if not filename.endswith('.xlsx'):
                    filename += '.xlsx'
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ñ–∞–π–ª –∑–∞–º–µ–Ω —Å –¥–∞—Ç–∞–º–∏
                    if is_replacement_file(filename):
                        replacement_files.append((href, filename))
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {filename}: {e}")
                    continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã)
        def get_sort_date(filename):
            try:
                date_part = filename[1]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–º —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç –∏–ª–∏ –æ–¥–Ω–æ–π –¥–∞—Ç–æ–π
                if '-' in date_part:
                    date_str = date_part.split('-')[0]
                else:
                    date_str = date_part.replace('.xlsx', '')
                    
                try:
                    return datetime.strptime(date_str, '%d.%m.%y')
                except ValueError:
                    return datetime.strptime(date_str, '%d.%m.%Y')
            except Exception:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
                return datetime.min
                
        replacement_files.sort(
            key=get_sort_date,
            reverse=True
        )

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–∞
        latest_files = replacement_files[:2]
        latest_filenames = [f[1] for f in latest_files]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        has_new_files = False
        new_files = []
        for _, filename in latest_files:
            if filename not in current_files:
                has_new_files = True
                new_files.append(filename)

        if has_new_files or force_check:
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω
            for old_file in current_files:
                try:
                    old_path = os.path.join(DOWNLOADS_DIR, old_file)
                    if os.path.exists(old_path):
                        os.remove(old_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω: {old_file}")

                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Dropbox
                    if dbx:
                        try:
                            dbx.files_delete_v2(f"/{old_file}")
                            logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω –∏–∑ Dropbox: {old_file}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Dropbox: {e}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ {old_file}: {e}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            for href, filename in latest_files:
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                    file_response = requests.get(href)
                    file_response.raise_for_status()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                    local_path = os.path.join(DOWNLOADS_DIR, filename)
                    with open(local_path, 'wb') as f:
                        f.write(file_response.content)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω: {filename}")

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Dropbox
                    if dbx:
                        with open(local_path, 'rb') as f:
                            dbx.files_upload(f.read(), f"/{filename}", mode=dropbox.files.WriteMode.overwrite)
                        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω –≤ Dropbox: {filename}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ {filename}: {e}")
            
            return new_files
        else:
            logger.info("–ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–º–µ–Ω: {str(e)}")
        return []

def sync_group_schedules(dbx, force_check=False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø —Å LMSMGTU"""
    try:
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Ñ–∞–π–ª–∞–º–∏ –∑–∞–º–µ–Ω
        current_files = [f for f in os.listdir(DOWNLOADS_DIR) 
                       if f.endswith('.xlsx') and not is_replacement_file(f)]
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø
        for old_file in current_files:
            try:
                old_path = os.path.join(DOWNLOADS_DIR, old_file)
                if os.path.exists(old_path):
                    os.remove(old_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {old_file}")

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Dropbox
                if dbx:
                    try:
                        dbx.files_delete_v2(f"/{old_file}")
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Dropbox: {old_file}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Dropbox: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ {old_file}: {e}")
        
        downloaded_files = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π URL —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø
        for url in GROUP_SCHEDULE_URLS:
            try:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ URL: {url}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —Å–∞–π—Ç–∞
                response = requests.get(url)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                links = soup.find_all('a')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
                for link in links:
                    href = link.get('href')
                    filename = link.text.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel-—Ñ–∞–π–ª
                    if href and ('.xlsx' in href or '.xls' in href):
                        if not filename.endswith('.xlsx'):
                            filename += '.xlsx'
                        
                        try:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                            file_response = requests.get(href)
                            file_response.raise_for_status()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                            local_path = os.path.join(DOWNLOADS_DIR, filename)
                            with open(local_path, 'wb') as f:
                                f.write(file_response.content)
                            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {filename}")
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Dropbox
                            if dbx:
                                with open(local_path, 'rb') as f:
                                    dbx.files_upload(f.read(), f"/{filename}", mode=dropbox.files.WriteMode.overwrite)
                                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ Dropbox: {filename}")
                            
                            downloaded_files.append(filename)
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø: {len(downloaded_files)}")
        
        # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
        new_files = [f for f in downloaded_files if f not in current_files]
        if new_files:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø: {len(new_files)}")
        else:
            logger.info("–ù–æ–≤—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        return new_files
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø: {e}")
        return []

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º –∑–∞–º–µ–Ω
def is_replacement_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º –∑–∞–º–µ–Ω (–∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∏–º–µ–Ω–∏)."""
    if not filename.endswith('.xlsx'):
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç (DD.MM.YY-DD.MM.YY.xlsx)
        if '-' in filename:
            date_parts = filename.replace('.xlsx', '').split('-')
            if len(date_parts) != 2:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã
            start_date_str = date_parts[0]
            parts = start_date_str.split('.')
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥)
            if len(parts) != 3:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞
            try:
                day = int(parts[0])
                month = int(parts[1])
                year = int(parts[2])
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                if not (1 <= day <= 31 and 1 <= month <= 12):
                    return False
                    
                return True
            except ValueError:
                return False
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å –æ–¥–Ω–æ–π –¥–∞—Ç–æ–π (DD.MM.YY.xlsx)
            date_pattern = re.compile(r'^(\d{2}\.\d{2}\.\d{2,4})\.xlsx$')
            match = date_pattern.match(filename)
            if not match:
                return False
                
            date_str = match.group(1)
            parts = date_str.split('.')
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏ (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥)
            if len(parts) != 3:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞
            try:
                day = int(parts[0])
                month = int(parts[1])
                year = int(parts[2])
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                if not (1 <= day <= 31 and 1 <= month <= 12):
                    return False
                    
                return True
            except ValueError:
                return False
    except Exception:
        return False

def schedule_sync():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("=== –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ–Ω ===")

    def scheduled_sync():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        sync_files_async()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    schedule.every(5).minutes.do(scheduled_sync)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    scheduled_sync()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    schedule_sync()